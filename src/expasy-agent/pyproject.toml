[project]
name = "expasy-agent"
version = "0.0.1"
description = "LangGraph agent to create an assistant that helps users access open data endpoints, such as public SPARQL endpoints."
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Vincent Emonet", email = "vincent.emonet@gmail.com" }]
maintainers = [{ name = "Vincent Emonet", email = "vincent.emonet@gmail.com" }]
keywords = [
    "SPARQL",
    "LLM",
    "Expasy",
    "KGQA",
    "Chatbot",
]
requires-python = ">=3.9"
dependencies = [
    # LangGraph dependencies
    "langgraph >=0.2.61",
    "langchain >=0.3.14",
    "langchain-community >=0.3.17",
    "langchain-openai >=0.1.22",
    "langchain-azure-ai >=0.1.0",
    "langchain-groq >=0.2.4",
    "langchain-together >=0.3.0",
    "langchain-mcp-adapters",
    "langchain-qdrant @ git+https://github.com/langchain-ai/langchain.git#subdirectory=libs/partners/qdrant",
    "qdrant-client >=1.13.0",
    "langfuse >=3.0.8",
    # "langchain-qdrant >=0.2.1",
    # "langchain-huggingface", # This will install torch and many heavy nvidia dependencies
    # "langchain-deepseek >=0.1.1",
    # "langchain-anthropic >=0.1.23",
    # "langchain-fireworks >=0.1.7",
    # Dependencies to deploy the API
    "sparql-llm >=0.0.8",
    "rdflib >=7.0.0",
    "httpx >=0.27.2",
    "fastapi >=0.115.8",
    "uvicorn[standard] >=0.34.0",
    "pydantic >=2.10.0",
    "pydantic-settings >=2.7.0",
    "jinja2 >=3.1.5",
    "sentry-sdk[fastapi] >=2.27.0", # Error reporting at the SIB
    # Extract potential entities from text without LLM
    # "scispacy >=0.5.5",
    # "en_core_sci_md @ https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.5.4/en_core_sci_md-0.5.4.tar.gz",
    "pandas >=2.2.3",
    "beautifulsoup4 >=4.13.0",
    "markdownify>=1.1.0",
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "joblib>=1.5.1",
]

[project.optional-dependencies]
cpu = [
    "fastembed >=0.5.1",
]
gpu = [
    "fastembed-gpu >=0.5.1",
]


[dependency-groups]
dev = [
    "langgraph-cli[inmem] >=0.1.71",
    "pytest >=8.3.4",
    "pytest-cov >=6.0.0",
    "pytest-asyncio >=0.25.3",
    "ruff >=0.9.5",
    "mypy >=1.15.0",
    "pre-commit >=4.1.0",
]

[tool.uv.sources]
sparql-llm = { workspace = true }

[build-system]
requires = ["setuptools>=73.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["langgraph.templates.expasy_agent", "expasy_agent"]
[tool.setuptools.package-dir]
"langgraph.templates.expasy_agent" = "src/expasy_agent"
"expasy_agent" = "src/expasy_agent"

[tool.setuptools.package-data]
"*" = ["py.typed"]

# TODO: try hatch build system
# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

# dynamic = ["version"]

# [tool.hatch.version]
# path = "src/expasy_agent/__init__.py"

# [tool.hatch.build.targets.wheel]
# packages = ["src/expasy_agent"]

# Required for onnxruntime-gpu on CUDA 12
[tool.uv.pip]
extra-index-url = ["https://aiinfra.pkgs.visualstudio.com/Publicsrc/_packaging/onnxruntime-cuda-12/pypi/simple/"]

[tool.ruff]
lint.select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    # "D",    # pydocstyle
    "D401", # First line should be in imperative mood
    "T201",
    "UP",
    # Ours:
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    # "PLR",   # pylint refactor Magic value used in comparison, consider replacing 400 with a constant variable
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
lint.ignore = [
    "UP006",
    "UP007",
    # We actually do want to import from typing_extensions
    "UP035",
    # Relax the convention by _not_ requiring documentation for every function parameter.
    "D417",
    "E501",
    "T201", # do not use print
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "UP", "S101"]
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.mccabe]
max-complexity = 12
